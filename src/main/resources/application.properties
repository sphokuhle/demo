#DATABASE
spring.datasource.url=jdbc:postgresql://localhost:5432/hello_world
spring.datasource.driver-class-name = org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.show-sql=true
spring.datasource.initialization-mode=always
spring.datasource.continue-on-error=true
server.servlet.context-path=/Student_Portal/api/v1
spring.datasource.username=postgres
spring.datasource.password=posPassword1
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialect

#java mail
spring.mail.host=localhost
spring.mail.username=Administrator
spring.mail.password=mailPassword1
spring.mail.port=25
spring.mail.debug=true
#java.net.preferIPv4Stack=true
spring.mail.properties.mail.transport.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true 
#ESMTP

#SECURITY
#OATH2 Configurations for token authentication
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://localhost:8180/auth/realms/demo
spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://localhost:8180/auth/realms/demo/protocol/openid-connect/certs

#if we want to add 5 custom filters first before the Spring Security Filters which are invoked 1st by default.
spring.security.filter.order=5

app.security.jwtIssuer=http://localhost:8180/auth/realms/demo
app.security.jwtPublicKey=MIIClzCCAX8CBgF5wbI5EDANBgkqhkiG9w0BAQsFADAPMQ0wCwYDVQQDDARkZW1vMB4XDTIxMDUzMTA5MTA1M1oXDTMxMDUzMTA5MTIzM1owDzENMAsGA1UEAwwEZGVtbzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKGjOkUYVZeSUUBlBvv9+kUFjkcfx0fMi7ELMAuoNorSA87lXmofQrpw1PUQ7IaJ+eugVuR7joRA7d4lQdrk9X/ok+Od7sCrYUWAIqcC/dbG5qEt1ZNpBI6KucDP+uSHUhfHYIce0OnVVZ3FmgeHOV5oOntaZfrLx27Ccf6478g3OGM3eItgS1U6rVLU6IaiMP3xZi70ntM8rKydMuwXkQLoHaNY9ed2XTsEnMeFWe6FPAGjssHVPDYvdR/Z/YJs7MP7eERs8ojAZq9OJp5W8HMDRlHu1B4raBIQUGvMesQ3TTh2OMrT7xa0N5SBNE9dAovZcJO6iHziBnjxBXq8sp8CAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAWJPAVv63Qvv9l+eji+S8U0FRXQ94B4Hk4zKFI2CBJSY/966gvZlzsYmDwlDjoO74F+XrThdn8703dGt9r+up4zDL1gfsqtDvolRDc5xhpGJLjfFMDcG0wzeCwfxH9l7B0jVLB/rGpPR+U0WJ7UmUaUS3EOTbVUOyFP1+LgLOetCBP2XLLpcjka6/LvtkaGeU5sv+RMxK6smCdkm3Zi4rP8m+te9LamoLAtMK/Ftw9m25MizQf/qtcX4A6LkfuE5VohDX3pcdzfLD4VDvnUa8JCa7M4/la8j64VOAjDOFNC8NJebLaK8Xzh+4+IDfPSMt3KhrcrNCezbhxYXnZLZyLw==

#KEYCLOAK
keycloak.auth-server-url=http://localhost:8180/auth
keycloak.realm=demo
keycloak.resource=demo-app
keycloak.public-client=true
keycloak.principal-attribute=preferred_username
keycloak.ssl-required=external
keycloak.credentials.secret=2247f4ed-7152-4254-82d6-f4038110e0df
keycloak.use-resource-role-mappings=true
keycloak.bearer-only=true
app.sso.auth-url=http://localhost:8180/auth/realms/demo/protocol/openid-connect/token

server.port=8443

#Trying to replicate Connection timeout exception below
#org.springframework.jdbc.CannotGetJdbcConnectionException:
# Failed to obtain JDBC Connection;
# nested exception is java.sql.SQLTransientConnectionException: HikariPool-10 - Connection is not available, request timed out after 30000ms.
#OR Caused by: org.hibernate.exception.JDBCConnectionException: Could not open connection (Was using postgresql)
#spring.datasource.hikari.read-only=false
spring.datasource.hikari.connection-timeout=300
spring.datasource.hikari.idle-timeout=10000
spring.datasource.hikari.validation-timeout=3000
spring.datasource.hikari.max-lifetime=30000
spring.datasource.hikari.login-timeout=1
spring.datasource.hikari.maximum-pool-size=2
spring.datasource.hikari.minimum-idle=1

#javax.persistence.query.timeout=1
#spring.datasource.tomcat.max-wait=500
#max_dbPoolSize=1
#spring.datasource.hikari.idle-timeout=250

